# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the staging branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - staging

env:
  ALCHEMY_ENDPOINT_SECRET_NAME: alchemy-endpoint-staging
  CR_REGION: us-east1
  CR_SERVICE: alert-service-staging
  ENVIRONMENT: STAGING
  GAR_IMAGE: alert-service
  GAR_LOCATION: us-east1
  GAR_REPOSITORY: service-build-images
  LAND_ADDRESS: '0x230E4e85d4549343A460F5dE0a7035130F62d74C'
  PROJECT_ID: nft-marketplace-362416
  PUB_SUB_TOPIC_ID: send-alert-staging
  GMAIL_USER_SECRET_NAME: gmail-user-nm-test
  GMAIL_PASS_SECRET_NAME: gmail-pass-nm-test
  MDB_USER_SECRET_NAME: mdb-user
  MDB_PASS_SECRET_NAME: mdb-pass
  DB_SECRET_NAME: mdb-cluster-domain
  PORT: 587

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
      uses: 'google-github-actions/auth@v0'
      with:
    steps:
      token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        run: |-
          export DOCKER_BUILDKIT=1
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.COMMON_PACKAGE_DEPLOY_KEY_PRIVATE }}'
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.GAR_IMAGE }}:${{ github.sha }}" --ssh default ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.GAR_IMAGE }}:${{ github.sha }}"
      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.CR_SERVICE }}
          region: ${{ env.CR_REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.GAR_IMAGE }}:${{ github.sha }}
          env_vars: |
            ALCHEMY_ENDPOINT_SECRET_NAME=${{ env.ALCHEMY_ENDPOINT_SECRET_NAME }}
            PUB_SUB_TOPIC_ID=${{ env.PUB_SUB_TOPIC_ID }}
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            GCP_PROJECT_ID=${{ env.PROJECT_ID }}
            LAND_ADDRESS=${{ env.LAND_ADDRESS }}
            SENDGRID_API_KEY_SECRET_NAME=${{ env.SENDGRID_API_KEY_SECRET_NAME }}
            UNICORN_ADDRESS=${{ env.UNICORN_ADDRESS }}
            MEDIA_BUCKT_NAME=${{ env.MEDIA_BUCKT_NAME }}
      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
